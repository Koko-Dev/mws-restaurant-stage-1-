let dbPromise=idb.open("restaurant-info",1,t=>{switch(t.oldVersion){case 0:case 1:t.createObjectStore("restaurant-info",{keyPath:"id"})}});class DBHelper{static get DATABASE_URL(){return"http://localhost:1337/restaurants"}static fetchRestaurants(t){fetch(DBHelper.DATABASE_URL).then(t=>t.json()).then(e=>{dbPromise.then(a=>{let r=a.transaction("restaurant-info","readwrite").objectStore("restaurant-info");e.forEach(t=>{r.put(t)}),t(null,e)})}).catch(t=>{console.log("[dbhelper] Error with populating indexedDB")})}static fetchRestaurantById(t,e){DBHelper.fetchRestaurants((a,r)=>{if(a)e(a,null);else{const a=r.find(e=>e.id==t);a?e(null,a):e("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(t,e){DBHelper.fetchRestaurants((a,r)=>{if(a)e(a,null);else{const a=r.filter(e=>e.cuisine_type==t);e(null,a)}})}static fetchRestaurantByNeighborhood(t,e){DBHelper.fetchRestaurants((a,r)=>{if(a)e(a,null);else{const a=r.filter(e=>e.neighborhood==t);e(null,a)}})}static fetchRestaurantByCuisineAndNeighborhood(t,e,a){DBHelper.fetchRestaurants((r,n)=>{if(r)a(r,null);else{let r=n;"all"!=t&&(r=r.filter(e=>e.cuisine_type==t)),"all"!=e&&(r=r.filter(t=>t.neighborhood==e)),a(null,r)}})}static fetchNeighborhoods(t){DBHelper.fetchRestaurants((e,a)=>{if(e)t(e,null);else{const e=a.map((t,e)=>a[e].neighborhood),r=e.filter((t,a)=>e.indexOf(t)==a);t(null,r)}})}static fetchCuisines(t){DBHelper.fetchRestaurants((e,a)=>{if(e)t(e,null);else{const e=a.map((t,e)=>a[e].cuisine_type),r=e.filter((t,a)=>e.indexOf(t)==a);t(null,r)}})}static urlForRestaurant(t){return`./restaurant.html?id=${t.id}`}static imageUrlForRestaurant(t){return`/img/${t.photograph}`}static mapMarkerForRestaurant(t,e){return new google.maps.Marker({position:t.latlng,title:t.name,url:DBHelper.urlForRestaurant(t),map:e,animation:google.maps.Animation.DROP})}}